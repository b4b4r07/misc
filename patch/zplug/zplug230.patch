diff --git a/autoload/commands/__install__ b/autoload/commands/__install__
index b6b1464..4481347 100644
--- a/autoload/commands/__install__
+++ b/autoload/commands/__install__
@@ -5,10 +5,24 @@
 local     repo arg
 local -aU repos
 local -A  tags
-local -a  failed_packages
-local -A  from
-local -i  max=0
-local -F  SECONDS=0 start_time finish_time
+local -i  status_code=0 cant_lock=0
+
+local -A repo_pids states hook_build hook_finished hook_pids status_codes repo_dir
+local -F SECONDS=0
+local -a spinners sub_spinners
+local -i spinner_idx subspinner_idx
+local -i timeout=60
+local    is_parallel=""
+
+rm -f \
+    "$_zplug_config[build_success]" \
+    "$_zplug_config[build_failure]" \
+    "$_zplug_config[build_timeout]" \
+    "$_zplug_config[install_status]"
+touch "$_zplug_config[install_status]"
+
+spinners=(⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏)
+sub_spinners=(⠁ ⠁ ⠉ ⠙ ⠚ ⠒ ⠂ ⠂ ⠒ ⠲ ⠴ ⠤ ⠄ ⠄ ⠤ ⠠ ⠠ ⠤ ⠦ ⠖ ⠒ ⠐ ⠐ ⠒ ⠓ ⠋ ⠉ ⠈ ⠈)
 
 while (( $# > 0 ))
 do
@@ -32,26 +46,30 @@ do
     shift
 done
 
-# Initialize
-{
-    start_time=$SECONDS
+# If no argument is given,
+# use non-installed plugins as an installation target
+if (( $#repos == 0 )); then
+    __zplug::core::core::run_interfaces \
+        "check" \
+        2> >(__zplug::io::log::capture) >/dev/null \
+        || repos=( "${reply[@]}" )
+fi
 
-    if (( $#repos == 0 )); then
-        # Case of existing not installed repos
-        __zplug::core::core::run_interfaces \
-            "check" \
-            2> >(__zplug::io::log::capture) >/dev/null \
-            || repos=( "${reply[@]}" )
-    fi
+# No plugin to install
+if (( $#repos == 0 )); then
+    return 0
+fi
 
-    for repo in "${repos[@]}"
-    do
-        (( $#repo > $max )) && max=$#repo
-    done
-}
+# Check the number of arguments
+if (( $#repos > 1 )); then
+    is_parallel=true
+fi
 
-# Main loop
-for repo in "${repos[@]}"
+# Suppress outputs
+#setopt localoptions nonotify nomonitor
+setopt nonotify nomonitor
+
+for repo in "$repos[@]"
 do
     if ! __zplug::base::base::zpluged "$repo"; then
         __zplug::io::print::f \
@@ -65,124 +83,198 @@ do
     __zplug::core::tags::parse "$repo"
     tags=( "${reply[@]}" )
 
-    # Skip items
+    # Run the installation in background
     {
         if [[ -n $tags[if] ]]; then
-            if ! eval "$tags[if]" 2> >(__zplug::io::log::capture) >/dev/null; then
-                __zplug::io::print::put \
-                    "$fg[red]-$reset_color $fg[green]$repo$reset_color: skipped due to if tag\n"
-                continue
+            status_code=$_zplug_status[install_skip_if]
+        else
+            # Run 'install' handler
+            if __zplug::core::sources::is_handler_defined "install" "$tags[from]"; then
+                __zplug::core::sources::use_handler \
+                    "install" \
+                    "$tags[from]" \
+                    "$repo"
+                status_code=$status
             fi
         fi
 
-        if __zplug::core::sources::is_handler_defined "check" "$tags[from]"; then
-            if __zplug::core::sources::use_handler "check" "$tags[from]" "$repo"; then
-                __zplug::io::print::put \
-                    "$fg[red]-$reset_color $fg[green]$repo$reset_color: already installed\n"
-                continue
-            fi
-        fi
-    }
-
-    # For checking whether the repo's installation is success
-    from+=( "$repo" "$tags[from]" )
-
-    __zplug::job::spinner::lock
-    __zplug::job::spinner::spin &
-    # Run installation in subprocess
-    {
-        trap '__zplug::job::spinner::unlock; trap - SIGINT' SIGINT
-
-        # All variables are treated as local variable
-        # because of background job (subprocess)
-        local -i ret=2
-        local -F SECONDS=0
-
-        __zplug::job::spinner::echo \
-            "%-20s %s\n" \
-            "Installing..." \
-            "$repo"
-
-        if __zplug::core::sources::is_handler_defined "install" "$tags[from]"; then
-            __zplug::core::sources::use_handler \
-                "install" \
-                "$tags[from]" \
-                "$repo"
-            ret=$status
+        # Manage the status codes in a file
+        # to lock the file in order to write asynchronously
+        (
+        zsystem flock -t 180 "$_zplug_config[install_status]"
+        cant_lock=$status
+        if (( cant_lock > 0 )); then
+            {
+                printf "Can't acquire lock for $_zplug_config[install_status]."
+                if (( cant_lock == 2 )); then
+                    printf " timeout."
+                fi
+                printf "\n"
+            } 1> >(__zplug::io::log::capture)
+            return 1
         fi
 
-        case "$ret" in
-            0)
-                __zplug::job::spinner::echo \
-                    "$fg[green]%-20s$reset_color %-${max}s\t(%.2fs)\n" \
-                    "Installed!" \
-                    "$repo" \
-                    $SECONDS
-
-                # hook after installing
-                __zplug::job::hook::build "$repo"
-                ;;
-            1)
-                __zplug::job::spinner::echo \
-                    --die \
-                    "$fg[red]%-20s$reset_color %-${max}s\t(%.2fs)\n" \
-                    "Failed to install" \
-                    "$repo" \
-                    $SECONDS
-                ;;
-            2)
-                __zplug::job::spinner::echo \
-                    --die \
-                    --zplug \
-                    --error \
-                    "sources/$tags[from] is not defined\n"
-                ;;
-        esac
+        # Save the status code with LTSV
+        __zplug::io::print::f "repo:%s\tstatus:%s\n" \
+            "$repo" \
+            "$status_code" \
+            >>|"$_zplug_config[install_status]"
+        )
     } &
-    __zplug::job::queue::enqueue "$!"
-    __zplug::job::queue::wait
+
+    repo_pids[$repo]=$!
+    repo_dir[$repo]="$tags[dir]"
+    hook_build[$repo]="$tags[hook-build]"
+    hook_finished[$repo]=false
+    states[$repo]="unfinished"
+    status_codes[$repo]=""
 done
 
-# Finalize
-{
-    __zplug::job::queue::wait_all
-    __zplug::job::spinner::unlock
+__zplug::io::print::f \
+    --zplug \
+    "Start to install %d plugin${is_parallel:+"s"} %s\n\n" \
+    $#repos \
+    "${is_parallel:+"in parallel"}"
 
-    failed_packages=()
-    for repo in "${(k)from[@]}"
+repeat $(($#repos + 2))
+do
+    printf "\n"
+done
+
+#
+# Multiple progress bars
+#
+while __zplug::job::state::running "$repo_pids[@]" "$hook_pids[@]"
+do
+    sleep 0.1
+    __zplug::utils::ansi::cursor_up $(($#repos + 2))
+
+    # Count up within spinners index
+    if (( ( spinner_idx+=1 ) > $#spinners )); then
+        spinner_idx=1
+    fi
+    # Count up within sub_spinners index
+    if (( ( subspinner_idx+=1 ) > $#sub_spinners )); then
+        subspinner_idx=1
+    fi
+
+    for repo in "${(k)repo_pids[@]}"
     do
-        if __zplug::core::sources::is_handler_defined "check" "$from[$repo]"; then
-            if ! __zplug::core::sources::use_handler "check" "$from[$repo]" "$repo"; then
-                failed_packages+=( "$repo" )
+        if __zplug::job::state::running "$repo_pids[$repo]"; then
+            printf " $fg[white]$spinners[$spinner_idx]$reset_color  Installing...  $repo\n"
+        else
+            # If $repo has build-hook tag
+            if [[ -n $hook_build[$repo] ]]; then
+                # Save status code for process cache
+                if [[ -z $status_codes[$repo] ]]; then
+                    status_codes[$repo]="$(__zplug::job::state::get "$repo")"
+                fi
+                if [[ $status_codes[$repo] != 0 ]]; then
+                    printf " $fg_bold[red]\U2718$reset_color  $fg[red]Failed to do$reset_color   $repo --> hook-build: $fg[red]cancel$reset_color\n"
+                    continue
+                fi
+
+                if ! $hook_finished[$repo]; then
+                    hook_finished[$repo]=true
+                    # Run the hook-build in background
+                    {
+                        __zplug::job::hook::build "$repo"
+                        if (( $status > 0 )); then
+                            printf "$repo\n" >>|"$_zplug_config[build_failure]"
+                            printf "$repo\n" >>|"$_zplug_config[build_rollback]"
+                        else
+                            printf "$repo\n" >>|"$_zplug_config[build_success]"
+                        fi
+                    } & hook_pids[$repo]=$!
+                    # Run the timeout process in background
+                    {
+                        # kill the process for hook-build after sleeping
+                        # during the number of seconds that has been set as a timeout
+                        sleep "$timeout"
+
+                        # Check if $repo_pids don't run
+                        # and check if the process ($hook_pids[$repo]) that has should be killed
+                        if __zplug::job::state::running $hook_pids[$repo] && ! __zplug::job::state::running "$repo_pids[@]"; then
+                            kill -9 $hook_pids[$repo] &>/dev/null
+                            printf "$repo\n" >>|"$_zplug_config[build_timeout]"
+                            printf "$repo\n" >>|"$_zplug_config[build_rollback]"
+                        fi
+                    } &
+                fi
+
+                if __zplug::job::state::running "$hook_pids[$repo]"; then
+                    # running build-hook
+                    __zplug::utils::ansi::erace_current_line
+                    printf " $fg_bold[white]$spinners[$spinner_idx]$reset_color  $fg[green]Installed!$reset_color     $repo --> hook-build: $sub_spinners[$subspinner_idx]\n"
+                else
+                    # finished build-hook
+                    __zplug::utils::ansi::erace_current_line
+                    if [[ -f $_zplug_config[build_failure] ]] && grep -x "$repo" "$_zplug_config[build_failure]" &>/dev/null; then
+                        printf " $fg_bold[white]\U2714$reset_color  $fg[green]Installed!$reset_color     $repo --> hook-build: $fg[red]failure$reset_color\n"
+                    elif [[ -f $_zplug_config[build_timeout] ]] && grep -x "$repo" "$_zplug_config[build_timeout]" &>/dev/null; then
+                        printf " $fg_bold[white]\U2714$reset_color  $fg[green]Installed!$reset_color     $repo --> hook-build: $fg[yellow]timeout$reset_color\n"
+                    else
+                        printf " $fg_bold[white]\U2714$reset_color  $fg[green]Installed!$reset_color     $repo --> hook-build: $fg[green]success$reset_color\n"
+                    fi
+                fi
+            else
+                # Save status code for process cache
+                if [[ -z $status_codes[$repo] ]]; then
+                    status_codes[$repo]="$(__zplug::job::state::get "$repo")"
+                fi
+                case $status_codes[$repo] in
+                    $_zplug_status[install_success])
+                        printf " $fg_bold[white]\U2714$reset_color  $fg[green]Installed!$reset_color     $repo\n"
+                        ;;
+                    $_zplug_status[install_failure])
+                        printf " $fg_bold[red]\U2718$reset_color  $fg[red]Failed to do$reset_color   $repo\n"
+                        ;;
+                    $_zplug_status[install_already])
+                        printf " $fg[yellow]\U2714  Already installed $reset_color   $repo\n"
+                        ;;
+                    $_zplug_status[install_skip_if])
+                        printf " $fg[yellow]\U279C  Skipped due to if $reset_color   $repo\n"
+                        ;;
+                    *)
+                        printf " $fg_bold[red]\U2718$reset_color  $fg[red]Unknown$reset_color        $repo\n"
+                esac
             fi
+            states[$repo]="finished"
         fi
     done
 
-    # Skip footer prints
-    if (( $#from == 0 )); then
-        __zplug::io::print::f \
-            --zplug \
-            "No package to install\n"
-        return 0
+    printf "\n"
+    if __zplug::job::state::running "$repo_pids[@]" "$hook_pids[@]"; then
+        printf "[zplug] Finished: ${(k)#states[(R)finished]}/$#states plugin${is_parallel:+"s"}\n"
     else
-        if (( $#failed_packages == 0 )); then
-            __zplug::io::print::put \
-                "$fg_bold[default] ==> Installation finished successfully!$reset_color\n"
-        else
-            __zplug::io::print::die \
-                "$fg_bold[red] ==> Installation failed for following packages:$reset_color\n"
-            __zplug::io::print::die \
-                "- $fg_bold[red]%s$reset_color\n" "${failed_packages[@]}"
-        fi
-
-        finish_time=$SECONDS
-
-        __zplug::io::print::f \
-            --zplug \
-            --func \
-            "total wall-time %f sec.\n" \
-            $(( $finish_time - $start_time ))
-
-        return $#failed_packages
+        __zplug::utils::ansi::erace_current_line
+        printf "[zplug] Elapsed time: %.4f sec.\n" $SECONDS
     fi
-}
+done
+
+# TODO
+if (( ${(k)#status_codes[(R)1]} == 0 )); then
+    printf "$fg_bold[default] ==> Installation finished successfully!$reset_color\n"
+else
+    printf "$fg_bold[red] ==> Installation failed for following packages:$reset_color\n"
+    # Listing the packages that have failed to install
+    for repo in "${(k)status_codes[@]}"
+    do
+        if [[ $status_codes[$repo] == 1 ]]; then
+            printf " - %s\n" "$repo"
+        fi
+    done
+fi
+
+if [[ -s $_zplug_config[build_rollback] ]]; then
+    if [[ -f $_zplug_config[build_failure] ]] || [[ -f $_zplug_config[build_timeout] ]]; then
+        printf "\n$fg_bold[red][zplug] These hook-build were failed to run:\n$reset_color"
+        # Listing the packages that have failed to build
+        {
+            sed 's/^/ - /g' "$_zplug_config[build_failure]"
+            sed 's/^/ - /g' "$_zplug_config[build_timeout]"
+        } 2>/dev/null
+        printf "[zplug] To retry these hook-build, please run '$fg_bold[default]zplug --rollback=hook-build$reset_color'.\n"
+    fi
+fi
+
diff --git a/autoload/init.zsh b/autoload/init.zsh
index e361b50..4579973 100644
--- a/autoload/init.zsh
+++ b/autoload/init.zsh
@@ -7,6 +7,9 @@ fpath=(
 "$fpath[@]"
 )
 
+zmodload zsh/system    #for flock
+zmodload zsh/parameter #for jobstates
+
 autoload -Uz add-zsh-hook
 autoload -Uz colors
 autoload -Uz compinit
diff --git a/autoload/options/__rollback__ b/autoload/options/__rollback__
new file mode 100644
index 0000000..69544da
--- /dev/null
+++ b/autoload/options/__rollback__
@@ -0,0 +1,33 @@
+#!/usr/bin/env zsh
+# Description:
+#   Rollback a failed package
+
+local    repo
+local -a spinners failed
+
+spinners=(⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏)
+
+if [[ ! -f $_zplug_config[build_rollback] ]] || [[ ! -s $_zplug_config[build_rollback] ]]; then
+    printf "There is no package which have to be rollbacked.\n" >&2
+    return 1
+fi
+
+#setopt localoptions nonotify nomonitor
+
+while read repo
+do
+    if [[ -z $repo ]]; then
+        continue
+    fi
+
+    printf "Building... $repo\n"
+    __zplug::job::hook::build "$repo"
+    if (( $status > 0 )); then
+        failed+=( "$repo" )
+    else
+        printf "Built!      $repo\n"
+    fi
+    sleep 0.5
+done <"$_zplug_config[build_rollback]"
+
+printf "%s\n" "$failed[@]" >|"$_zplug_config[build_rollback]"
diff --git a/base/core/core.zsh b/base/core/core.zsh
index 29e6149..2d03176 100644
--- a/base/core/core.zsh
+++ b/base/core/core.zsh
@@ -150,6 +150,9 @@ __zplug::core::core::prepare()
     mkdir -p "$ZPLUG_REPOS"
     mkdir -p "$ZPLUG_HOME/bin"
 
+    # Setup manage directory
+    mkdir -p "$ZPLUG_MANAGE"/{var,tmp}/log
+
     # Run compinit if zplug comp file hasn't load
     if (( ! $+functions[_zplug] )); then
         compinit
@@ -192,6 +195,38 @@ __zplug::core::core::variable()
     typeset -gx -i _ZPLUG_STATUS_ZPLUG_IS_LATEST=101
     typeset -gx -i _ZPLUG_STATUS_=255
 
+    typeset -gx     ZPLUG_MANAGE="$ZPLUG_HOME/.zplug"
+
+    typeset -gx -A _zplug_status
+    _zplug_status=(
+    "success"            0
+    "failure"            1
+    "true"               0
+    "false"              1
+    "repo_not_found"     2
+    "repo_frozen"        3
+    "repo_up_to_date"    4
+    "repo_local"         5
+    "invalid_argument"   6
+    "invalid_option"     7
+    "parse_error"        8
+    "latest_version"     101
+    "install_success"    0
+    "install_failure"    1
+    "install_already"    2
+    "install_skip_if"    3
+    )
+
+    typeset -gx -A _zplug_config
+    _zplug_config=(
+    "install_status" "$ZPLUG_MANAGE/tmp/installed"
+    "build_success"  "$ZPLUG_MANAGE/tmp/build_success"
+    "build_failure"  "$ZPLUG_MANAGE/tmp/build_failure"
+    "build_timeout"  "$ZPLUG_MANAGE/tmp/build_timeout"
+    "build_rollback" "$ZPLUG_MANAGE/tmp/build_rollback"
+    "error_log"      "$ZPLUG_MANAGE/var/log/error_log"
+    )
+
     if (( $+ZPLUG_SHALLOW )); then
         __zplug::io::print::f \
             --die \
diff --git a/base/io/print.zsh b/base/io/print.zsh
index ef58820..d77075f 100644
--- a/base/io/print.zsh
+++ b/base/io/print.zsh
@@ -91,7 +91,7 @@ __zplug::io::print::f()
     # Change the output destination by the value of $fd
     {
         echo "${pre_formats[*]}" \
-            | __zplug::utils::shell::unansi \
+            | __zplug::utils::ansi::remove \
             | read pre_format
         repeat $#pre_format; do w="$w "; done
 
diff --git a/base/job/hook.zsh b/base/job/hook.zsh
index 2697650..2f87d27 100644
--- a/base/job/hook.zsh
+++ b/base/job/hook.zsh
@@ -28,15 +28,18 @@ __zplug::job::hook::service()
         __zplug::utils::shell::cd "$tags[dir]"
         alias sudo=__zplug::utils::shell::sudo
 
-        eval "$tags[$hook]" 2> >(__zplug::io::log::capture)
-        if (( $status != 0 )); then
-            __zplug::io::print::f \
-                --die \
-                --zplug \
-                --error \
-                "'%s' failed\n" \
-                "$tags[$hook]"
-        fi
+        # Save a result to the log file (stdout/stderr)
+        eval "$tags[$hook]" 2> >(__zplug::io::log::capture) 1>&2
+        return $status
+
+        #if (( $status != 0 )); then
+        #    __zplug::io::print::f \
+        #        --die \
+        #        --zplug \
+        #        --error \
+        #        "'%s' failed\n" \
+        #        "$tags[$hook]"
+        #fi
         )
     fi
 }
@@ -54,6 +57,7 @@ __zplug::job::hook::build()
     __zplug::job::hook::service \
         "$repo" \
         "hook-build"
+    return $status
 }
 
 __zplug::job::hook::load()
@@ -69,4 +73,5 @@ __zplug::job::hook::load()
     __zplug::job::hook::service \
         "$repo" \
         "hook-load"
+    return $status
 }
diff --git a/base/job/state.zsh b/base/job/state.zsh
new file mode 100644
index 0000000..a978ceb
--- /dev/null
+++ b/base/job/state.zsh
@@ -0,0 +1,27 @@
+__zplug::job::state::running()
+{
+    local job
+
+    for job in "$argv[@]"
+    do
+        if kill -0 "$job" &>/dev/null; then
+            return 0
+        fi
+    done
+
+    return 1
+}
+
+__zplug::job::state::get() {
+    local repo="${1:?}"
+
+    if [[ ! -f $_zplug_config[install_status] ]]; then
+        # TODO
+        return 1
+    fi
+
+    cat "$_zplug_config[install_status]" \
+        | grep "^repo:$repo" \
+        | awk '{print $2}' \
+        | cut -d: -f2
+}
diff --git a/base/utils/ansi.zsh b/base/utils/ansi.zsh
new file mode 100644
index 0000000..1c45383
--- /dev/null
+++ b/base/utils/ansi.zsh
@@ -0,0 +1,14 @@
+__zplug::utils::ansi::remove()
+{
+    perl -pe 's/\e\[?.*?[\@-~]//g'
+}
+
+__zplug::utils::ansi::erace_current_line()
+{
+    printf "\033[2K\r"
+}
+
+__zplug::utils::ansi::cursor_up()
+{
+    printf "\033[%sA" "${1:-"1"}"
+}
diff --git a/base/utils/git.zsh b/base/utils/git.zsh
index b3afa96..6071d2b 100644
--- a/base/utils/git.zsh
+++ b/base/utils/git.zsh
@@ -26,6 +26,10 @@ __zplug::utils::git::clone()
     __zplug::core::tags::parse "$repo"
     tags=( "${reply[@]}" )
 
+    if [[ -d $tags[dir] ]]; then
+        return $_zplug_status[install_already]
+    fi
+
     if [[ $tags[depth] == 0 ]]; then
         depth_option=""
     else
@@ -66,12 +70,17 @@ __zplug::utils::git::clone()
             ${=depth_option} \
             "$url_format" "$tags[dir]" \
             2> >(__zplug::io::log::capture) >/dev/null
+        ret=$status
     fi
 
     # The revison (hash/branch/tag) lock
     __zplug::utils::git::checkout "$repo"
 
-    return $status
+    if (( $ret == 0 )); then
+        return $_zplug_status[install_success]
+    else
+        return $_zplug_status[install_failure]
+    fi
 }
 
 __zplug::utils::git::checkout()
diff --git a/base/utils/shell.zsh b/base/utils/shell.zsh
index 9e4788b..dec6e8c 100644
--- a/base/utils/shell.zsh
+++ b/base/utils/shell.zsh
@@ -175,3 +175,12 @@ __zplug::utils::shell::pipestatus()
     [[ ${_status//0 /} == 0 ]]
     return $status
 }
+
+__zplug::utils::shell::eval()
+{
+    local cmd
+
+    # Report stderr to error log
+    eval "${=cmd}" 2> >(__zplug::io::log::capture) >/dev/null
+    return $status
+}
