zmv() {
	emulate -RL zsh
	setopt localoptions extendedglob
	local f g match mbegin mend files action=mv myname exec
	local MATCH MBEGIN MEND
	local pat repl fpat
	typeset -A from to

    set -x
	myname=${(%):-%N}
	builtin cd ${~1:h}
	pat=$1:t
	repl=$2
	shift 2
	if [[ $pat = (#b)(*)\((\*\*##/)\)(*) ]]; then
		fpat="$match[1]$match[2]$match[3]"
			setopt localoptions bareglobqual
			fpat="${fpat}(odon)"
	else
		fpat=$pat
	fi
	files=(${~fpat})
	# errs=()
	for f in $files
	do
		if [[ $pat = (#b)(*)\(\*\*##/\)(*) ]]; then
			pat="$match[1](*/|)$match[2]"
		fi
		[[ -e $f && $f = (#b)${~pat} ]] || continue
		set -- "$match[@]"
		# {
			{
				g=${(Xe)repl}
			} 2> /dev/null
		# } always {
		# 	if (( TRY_BLOCK_ERROR )); then
		# 		print -r -- "$myname: syntax error in replacement" >&2
		# 		return 1
		# 	fi
		# }
		# if [[ -z $g ]]; then
		# 	errs+=("\`$f' expanded to an empty string")
		# elif [[ $f = $g ]]; then
		# 	continue
		# elif [[ -n $from[$g] && ! -d $g ]]; then
		# 	errs+=("$f and $from[$g] both map to $g")
		# elif [[ -f $g && ! ( $f -ef $g && $action = mv ) ]]; then
		# 	errs+=("file exists: $g")
		# fi
		from[$g]=$f
		to[$f]=$g
	done
	# if (( $#errs )); then
	# 	print -r -- "$myname: error(s) in substitution:" >&2
	# 	print -lr -- $errs >&2
	# 	return 1
	# fi
	for f in $files
	do
		[[ -z $to[$f] ]] && continue
		exec=(${=action} -- $f $to[$f])
		print -r -- ${(q-)exec}
	done
}

#zmv '~/.zplug/repos/b4b4r07/peco-tmux.sh/(*).sh' '$1'
zmv '~/.zplug/repos/kouzoh/mercari/b4b4r07/(*).sh' '$1'
