#!/bin/bash
# File: lessdir.sh
# Data: 2014-04-17

# 一時ファイルの名前を変数 t に入れる
# この名前は重複してはまずいので、とりあえず$$を使って
# プロセスIDを含めておく。
t=/tmp/L$$

# 途中でこのプロセスが異常終了したときに、
# 一時ファイルを自動的に消すようにtrapを仕掛ける。
cleanup() {
  rm $t; exit 1;
}
trap cleanup INT HUP TERM;

# 実際に表示する内容を、$t で表される一時ファイルに入れる。
# この部分は lessdir と同じだが、exec は使わない。
if [ $# -eq 0 ]; then
  # 引数がない場合、hoge | lessdirauto のように起動されたのだと考える。
  # cat にこのスクリプトの標準入力を継承させ、入ってきたものを全部
  # $t に吐かせる。
  cat > $t
elif [ -d "$1" ]; then
  # 最初の引数がディレクトリを表していれば、
  # ls モードと解釈する。ls の結果をまず全部 $t に吐かせる。
  ls -oF $* > $t
else
  # それ以外なら、ページャとして扱われたのだと考える。
  # 表示するファイルを全部 $t に吐かせる。
  cat $* > $t
fi

# (端末の行数 - 2) を変数 height に入れる。
# stty size は「25 80」のように「行数 桁数」の順で出力するので、
# それをまずいったん配列に入れて、最初の要素 ($1) だけを取り出すことで
# これが実現できる。あとは expr に渡して 2 だけ引いてやる。

# (stty を普通に呼ぶと、標準入力がパイプからのリダイレクトであるときに
# うまく動作しない。そこで、/dev/tty をリダイレクトすることで無理矢理端末を
# 見させるようにする。)
set -- `stty size </dev/tty`
height=`expr $1 - 2`

# 一時ファイル $t の行数を変数 lines に入れる。
# wc は「12 435 7880 filename」のように「行数 単語数 文字数 ファイル名」の
# 順で出力するので、これも最初の要素だけを取りだせばよい。
set -- `wc $t`
lines=$1

# 表示する行数 (lines) が端末の行数 (height) より多ければ less -X を、
# そうでなければ cat を使う。
if [ $lines -gt $height ]; then
  less -X $t;
else
  cat $t;
fi

# 最後に一時ファイルを消して、おしまい。
rm $t;
